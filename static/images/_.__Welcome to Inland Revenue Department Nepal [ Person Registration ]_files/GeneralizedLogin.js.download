/*
 * File: app/controller/GeneralizedLogin.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.GeneralizedLogin', {
    extend: 'Ext.app.Controller',

    onBtnLoginGeneralizedClick: function(button, e, eOpts) {
        console.log("login1");
		var me=this;
        var uiConfig='';

        var menuLink;
        var pageTitle;


        //var validateForm = Ext.getCmp('frmVatReturnsSubNo');

        var submissionNo = Ext.ComponentQuery.query('#txtVRSubmissionNo')[0].getValue();
        var username = Ext.ComponentQuery.query('#txtVRUsername')[0].getValue();
        var password = Ext.ComponentQuery.query('#txtVRPassword')[0].getValue();

        var leaf = Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].getValue();
        //alert(leaf);
        var form = button.up('form').getForm();

        if(form)
        {
            console.log(form);
        }
        if(form.isValid()){
            //var submissionNo = Ext.ComponentQuery.query('#txtVRSubmissionNo')[0].getValue();
			
            Ext.Ajax.request({
                url: '../Handlers/Vat/VatReturnsSubmissionNumberHandler.ashx',
                waitMsg: 'Validating User...',
                params:{method:'ValidateUser',
                    submissionNo:submissionNo,
                    username:username,
                password:password,formToken:Ext.get('frmToken').dom.innerHTML},
                success: function(response) {
                    var userInfo = Ext.decode(response.responseText);
                     //console.log("userInfo",userInfo);
                    console.log("user",userInfo);
					console.log("login2");
                    //USER VALIDATION FAILED
                    if(userInfo.root==='')
                    {
                        msg('INFO','कृपया प्रयोगकर्ताको नाम र पासवर्ड  मिलेन!!! <br/ ');
                        return;
                    }

Ext.get('offCode').dom.innerHTML=userInfo.root.RegOffice;
//alert(userInfo.root.submittedFor);
                    if(userInfo.root.submittedFor=='VRET'||userInfo.root.submittedFor=='VCB')
                    {

                        me.LoadReturns(submissionNo,userInfo.root.submittedFor,userInfo.root.PAN,userInfo.root.SubmittedYN,userInfo.root.RegOffice);
                        return;
                    }
	if (userInfo.root.submittedFor == 'PERRNEW') {

                        me.LoadPermitRenewal(submissionNo, userInfo.root.submittedFor, userInfo.root.PAN, userInfo.root.SubmittedYN, userInfo.root.RegOffice);
                        return;
                    }
					//if(userInfo.root.submittedFor=='SWB'||userInfo.root.submittedFor=='SWB')
                    //{

                      //  me.LoadReturns(submissionNo,userInfo.root.submittedFor,userInfo.root.PAN,userInfo.root.SubmittedYN,userInfo.root.RegOffice);
                        //return;
                    //}
					if(userInfo.root.submittedFor=='PANBILL'||userInfo.root.submittedFor=='PANBILL')
                    {

                        me.LoadPanBill(submissionNo,userInfo.root.submittedFor,userInfo.root.PAN,userInfo.root.SubmittedYN,userInfo.root.RegOffice);
                        return;
                    }

                    if (userInfo.root.submittedFor == 'PERADD') {

                        me.LoadNewPermit(submissionNo, userInfo.root.submittedFor, userInfo.root.PAN, userInfo.root.SubmittedYN, userInfo.root.RegOffice);
                        return;
                    }

                    if (userInfo.root.submittedFor == 'BRDADD') {

                        me.LoadBrandRegistration(submissionNo, userInfo.root.submittedFor, userInfo.root.PAN, userInfo.root.SubmittedYN, userInfo.root.RegOffice);
                        return;
                    }
					else if(userInfo.root.submittedFor=='EXCRET'||userInfo.root.submittedFor=='ECB')
                    {
                        me.LoadExciseReturns(submissionNo,userInfo.root.submittedFor,userInfo.root.PAN,userInfo.root.SubmittedYN);
                        return;
                    }
					//added for Health tax and education tax
																	
					else if(userInfo.root.submittedFor=='HRET')
                        {
                            var pan = userInfo.root.PAN;
							 //var subNo = userInfo.root.SubmissionNumber;
							 var acctType ='10';
                             uiConfig = {menuLink:'HealthTaxReturns',
                                         pageTitle:'E-Health Tax Return Entry'
                                        };
							DynamicUI(uiConfig,function(){},{submissionNo:submissionNo, pan:pan, acctType:acctType});
						}
						else if(userInfo.root.submittedFor=='HCB')
                        {
                            var pan = userInfo.root.PAN;
							 //var subNo = userInfo.root.SubmissionNumber;
							 var acctType ='10';
                             uiConfig = {menuLink:'HCloseofBusiness',
                                         pageTitle:'Health Tax Close of Business Login'
                                        };
							DynamicUI(uiConfig,function(){},{submissionNo:submissionNo, pan:pan, acctType:acctType});
						}
					//education tax
					else if(userInfo.root.submittedFor=='EDRET')
                        {
                            var pan = userInfo.root.PAN;
							var acctType ='10';
							uiConfig = {menuLink:'EducationTaxReturns',
                                        pageTitle:'E-Education Tax Return Entry'
                                        };
                            DynamicUI(uiConfig,function(){},{submissionNo:submissionNo, pan:pan, acctType:acctType});
																		
                        }
					else if(userInfo.root.submittedFor=='EDCB')
                        {
                            var pan = userInfo.root.PAN;
							var acctType ='10';
							uiConfig = {menuLink:'EDCloseOfBusiness',
                                        pageTitle:'Education Tax Close Of Business Login'
                                        };
                            DynamicUI(uiConfig,function(){},{submissionNo:submissionNo, pan:pan, acctType:acctType});
																		
                        }	
						
					else if(userInfo.root.submittedFor=='SWB')
					{
						console.log('1s',userInfo.root);
						var pan = userInfo.root.PAN;
						var subno = userInfo.root.SubmissionNumber;
						var submittedYn = userInfo.root.SubmittedYN;
						uiConfig = {menuLink:'BillingSoftwareRegistration',
									pageTitle:'Billing Software Registration'
									};
						DynamicUI(uiConfig,function(){
													var loadmsg = waitMsg("Loading...");
													 Ext.Ajax.request({
														url: '../Handlers/ComputerBilling/SoftwareBillingInfoHandler.ashx?method=GetSoftwareBillingInfoBySNo',
														method:'POST',
														params:{SNo:subno,formToken:Ext.get('frmToken').dom.innerHTML},
														success: function ( result, request ) {
															var obj = Ext.decode(result.responseText);

															if(obj.success === "false")
															{
																msg("WARNING",obj.message);
																return;
															}

															if(obj.root.length)
															{
																Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');
																var applicationName = Ext.ComponentQuery.query('#txtBAppicationName')[0];
																var applicationDescription = Ext.ComponentQuery.query('#txtBApplicationBrief')[0];



																var version = Ext.ComponentQuery.query('#txtBApplicationVersion')[0];
																//var certificationNo = Ext.ComponentQuery.query('#txtTaxPayerName')[0].getValue();
																var frontEnd = Ext.ComponentQuery.query('#txtBAppicaionFontEnd')[0];
																var backEnd = Ext.ComponentQuery.query('#txtBBackEnd')[0];


																var requestedDate = Ext.ComponentQuery.query('#txtRequestedDate')[0];
																var approvedDate = Ext.ComponentQuery.query('#txtApprovedDate')[0];




																var data = obj.root;
																

																applicationName.setValue(data[0].ApplicationName);
																applicationDescription.setValue(data[0].ApplicationDescription);

																requestedDate.setValue(data[0].RequestedDate);
																approvedDate.setValue(data[0].ApprovedDate);



																version.setValue(data[0].SoftwareBillingDetails[0].Version);
																frontEnd.setValue(data[0].SoftwareBillingDetails[0].FrontEnd);
																backEnd.setValue(data[0].SoftwareBillingDetails[0].BackEnd);

																var chkSpecification = Ext.ComponentQuery.query('#chkSpecification')[0];
																var userManual = Ext.ComponentQuery.query('#chkUserManual')[0];
																var chekcDataEntry = Ext.ComponentQuery.query('#chkDataEntry')[0];
																var dataBackupRecovery=Ext.ComponentQuery.query('#chkDataBackUp')[0];
																var systemArtitech=Ext.ComponentQuery.query('#chkSystemArt')[0];
															   // var softMap=Ext.ComponentQuery.query('#chkSoftMap')[0];



																var chkPan = Ext.ComponentQuery.query('#chkPan')[0];
																var cchkPanNew =   Ext.ComponentQuery.query('#cchkPan')[0];
																
																var chkComp = Ext.ComponentQuery.query('#chkComp')[0];
																var cchkCompNew = Ext.ComponentQuery.query('#cchkComp')[0];
																var cchkKarNew = Ext.ComponentQuery.query('#cchkKar')[0];
																
																var chkSoftware=Ext.ComponentQuery.query('#chkSoftware')[0];
																var chkBijuk=Ext.ComponentQuery.query('#chkBijuk')[0];
																
																if(data[0].SoftwareBillingDocument[0].IncludedYN ==="Y")
																{
																	cchkPanNew.setValue(true);
																}
																if(data[0].SoftwareBillingDocument[1].IncludedYN ==="Y")
																{
																	cchkCompNew.setValue(true);
																}
																if(data[0].SoftwareBillingDocument[1].IncludedYN ==="Y")
																{
																	cchkKarNew.setValue(true);
																}

																//if(data[0].SoftwareBillingDocument[0].IncludedYN ==="Y")
																//{
																//	chkSpecification.setValue(true);
																//}

																// if(data[0].SoftwareBillingDocument[1].IncludedYN ==="Y")
																//{
																//	userManual.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[2].IncludedYN ==="Y")
																//{
																//	chekcDataEntry.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[3].IncludedYN ==="Y")
																//{
																//	dataBackupRecovery.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[4].IncludedYN ==="Y")
																//{
																//	systemArtitech.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[5].IncludedYN ==="Y")
																//{
																   // softMap.setValue(true);
																//}
																//if(data[0].SoftwareBillingDocument[5].IncludedYN ==="Y")
																//{
																//	chkPan.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[6].IncludedYN ==="Y")
																//{
																//	chkComp.setValue(true);
																//}
																// if(data[0].SoftwareBillingDocument[7].IncludedYN ==="Y")
																//{
																//	chkSoftware.setValue(true);
																//} 
																//if(data[0].SoftwareBillingDocument[8].IncludedYN ==="Y")
																//{
																//	chkBijuk.setValue(true);
																//}



																var pan = Ext.ComponentQuery.query('#txtPan')[0];
																var vendorName = Ext.ComponentQuery.query('#txtPan')[0];
																var vendorType = Ext.ComponentQuery.query('#ddlVendors')[0];
																var contactNo = Ext.ComponentQuery.query('#txtMobile')[0];
																var developerForDistributers = Ext.ComponentQuery.query('#txtNameOfDistuber')[0];
																var developerCountry = Ext.ComponentQuery.query('#ddlCountry')[0];
																
																Ext.ComponentQuery.query('#txtSno')[0].setValue(submissionNo);;

																pan.setValue(data[0].SoftwareVendors[0].Pan);
																vendorName.setValue(data[0].SoftwareVendors[0].VendorName);

																vendorType.setValue(data[0].SoftwareVendors[0].VendorType);

																contactNo.setValue(data[0].SoftwareVendors[0].ContactNo);
																developerForDistributers.setValue(data[0].SoftwareVendors[0].DeveloperForDistibuters);
																developerCountry.setValue(data[0].SoftwareVendors[0].DeveloperCountry);



																//EQUIPMENT
													//alert('ok');
													//console.log('data[0]',data[0]);

																if(data[0].SoftwareBillingEquipmentInfo.count>0)
																{
																var nameOfEquipment = Ext.ComponentQuery.query('#txtNameOfEquipment')[0];
																			var brandName = Ext.ComponentQuery.query('#txtBrandName')[0];
																			var modelNo = Ext.ComponentQuery.query('#txtModelNo')[0];
																			var countryOfOrigin = Ext.ComponentQuery.query('#txtCountryOfOrigin')[0];
																			var dateOfManufacturing = Ext.ComponentQuery.query('#txtDateOfManufacturing')[0];
																			var nameOfBillingSoftware = Ext.ComponentQuery.query('#txtNameOfBillingSoftware')[0];
																			var frontEndEq = Ext.ComponentQuery.query('#txtAFrondEndTechnology')[0];
																			var backEndEq = Ext.ComponentQuery.query('#txtABackEndTechnology')[0];


																			nameOfEquipment.setValue(data[0].SoftwareBillingEquipmentInfo[0].EquipmentName);
																			brandName.setValue(data[0].SoftwareBillingEquipmentInfo[0].BrandName);
																			modelNo.setValue(data[0].SoftwareBillingEquipmentInfo[0].ModelNo);
																			countryOfOrigin.setValue(data[0].SoftwareBillingEquipmentInfo[0].CountryName);
																			dateOfManufacturing.setValue(data[0].SoftwareBillingEquipmentInfo[0].ManufacturingDate);
																			nameOfBillingSoftware.setValue(data[0].SoftwareBillingEquipmentInfo[0].BuiltInSoftware);
																			frontEndEq.setValue(data[0].SoftwareBillingEquipmentInfo[0].FrontEnd);
																			backEndEq.setValue(data[0].SoftwareBillingEquipmentInfo[0].BackEnd);
																}

															  //application
															   var applicantName = Ext.ComponentQuery.query('#txtApplicantName')[0].setValue(data[0].ApplicantName);
															   var designation=Ext.ComponentQuery.query('#ddlDesignation')[0].setValue(data[0].Designation);
															   var applicantEmail=Ext.ComponentQuery.query('#txtApplicantEmail')[0].setValue(data[0].ApplicantEmail);
															   var applicantPhone=Ext.ComponentQuery.query('#txtApplicantPhone')[0].setValue(data[0].ApplicantPhone);
															   var applicantMobile=Ext.ComponentQuery.query('#txtApplicantMobile')[0].setValue(data[0].ApplicantMobile);
															   var website=Ext.ComponentQuery.query('#txtWebsite')[0].setValue(data[0].Website);




														LoadTaxpayerInfoWithValidPan(data[0].SoftwareVendors[0].Pan,'10',function(obj){

																Ext.ComponentQuery.query("#txtTaxPayerName")[0].setValue(obj.root.Taxpayer.BusinessName);
																Ext.ComponentQuery.query("#txtAddress")[0].setValue(obj.root.Taxpayer.BusinessAddress.Address.StreetName);
																Ext.ComponentQuery.query("#txtTempAddress")[0].setValue(obj.root.Taxpayer.BusinessAddress.Address.StreetName);
																loadmsg.hide();

																	});
																	console.log('abc',data[0].Status);
																	
																	if(data[0].Status==='Y')
																	{
																		msg("INFO","Already Submiited!!!!!");
																		Ext.ComponentQuery.query('#btnSave')[0].disable(true);
																		Ext.ComponentQuery.query('#btnEdit')[0].disable(true);
																		Ext.ComponentQuery.query('#btnSubmit')[0].disable(true);
Ext.ComponentQuery.query('#btnVerify')[0].enable(true);
Ext.ComponentQuery.query("#hdnStatus")[0].setValue('Y');
																		return;
																	}

																	
														}
															else  {

																msg('INFO','SN No Not Found');
																loadmsg.hide();


															}

														}


													});
				});
					}
						console.log('userInfo.root.submittedFor',userInfo.root.submittedFor);
                    if(userInfo.root.submittedFor=='REG')
                    {
                        Ext.Ajax.request({
                            url:"../Handlers/Registration/RegistrationsForHandler.ashx?method=GetRegistrationsFors",
                            params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                            success: function ( result, request ) {  
                                var obj = Ext.decode(result.responseText);             
                                var arr=[];
                                var dta=obj.root;
                                if(dta.length>0)
                                {
                                    for(var c=0;c<dta.length;c++)
                                    {
                                        if(dta[c].RegFor=="PPAN" ||dta[c].RegFor=="ITAX"||dta[c].RegFor=="VAT" ||dta[c].RegFor=="EXCS" ||dta[c].RegFor=="WPAN")
                                        {
                                            arr.push(dta[c].RegFor);
                                        }
                                    }


                                    console.log(arr);
                                    var setRegFor="";                       /////
                                    if(arr.length==1)
                                    {                
                                        if(arr[0]==='PPAN')
                                        {           
                                            setRegFor=1;
                                        }
                                        else if(arr[0]==='ITAX')
                                        {
                                            setRegFor=2;
                                        }
                                        else if(arr[0]==='VAT')
                                        {
                                            setRegFor=3;
                                        }
                                        else if(arr[0]==='EXCS')
                                        {
                                            setRegFor=4;
                                        }
                                        else if(arr[0]==='WPAN')
                                        {
                                            setRegFor=9;
                                        }
                                    }
                                    else if(arr.length==2)
                                    {
                                        var url1=arr[0];
                                        var url2=arr[1];
                                        if((url1=='ITAX'&& url2=='VAT')||(url2=='ITAX'&& url1=='VAT'))
                                        {
											console.log('sudip1');
                                            setRegFor=6;
                                        }
                                        else if((url1=='ITAX'&& url2=='EXCS')||(url2=='ITAX'&& url1=='EXCS'))
                                        {
                                            setRegFor=8;
                                        }
                                        else if((url1=='VAT'&& url2=='EXCS')||(url2=='VAT'&& url1=='EXCS'))
                                        {
                                            setRegFor=7;
                                        }
                                    }
                                    else if(arr.length==3)
                                    {
                                        setRegFor=5;
                                    }

                                    var businessTyp="";
                                    var tpType="";
									var offcNamee = '';
									
									var waitLoadOff = waitMsg('Loading Office...');
									Ext.Ajax.request({
										url: '../Handlers/Common/OfficeHandler.ashx?method=GetOfficesWithApplication',
										params:{officeCode:userInfo.root.RegOffice},
										success: function ( result, request ) {
											var data = Ext.decode(result.responseText);
											waitLoadOff.hide();
											offcNamee = data.root[0].OfficeNameNepali;
										},
										failure: function ( result, request ) {
												waitLoadOff.hide();
												msg('ERROR','');
											}
									});
                                    if(setRegFor==1)  //PPAN
                                    {        
									
									var waitLoad = waitMsg('Loading...');
										Ext.Ajax.request({
													url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
													params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
													success: function ( result, request ) {
														var data = Ext.decode(result.responseText);
														console.log('dataata',data.root);
														waitLoad.hide();
														if(data.root)
														{
															ppanAction="A";
															uiConfig = {menuLink:'PersonRegistration',pageTitle:'Person Registration'};
															DynamicUI(uiConfig,function(){    

															},{subNo:submissionNo,regFor:setRegFor, busSubTyp:data.root.TaxpayerType,busTyp:data.root.TaxpayerCategoryID,officeName:offcNamee});
														}
													},
													failure: function ( result, request ) {
															waitLoad.hide();
															msg('ERROR','');
														}

													});
                                        
                                        }
                                    //added by JS
                                    else if(setRegFor==9)  //PPAN
                                    {
                                        ppanAction="A";
										Ext.Ajax.request({
                                                url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
                                                params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                                                success: function ( result, request ) {
                                                    var data = Ext.decode(result.responseText);
                                                    if(data.root)
                                                    {
														
                                                        tpType=data.root.TaxpayerType;
                                                        businessTyp=data.root.TaxpayerCategoryID;
                                                        // code to check taxpayer type
                                                        if(businessTyp=="T")
                                                        {
                                                            var panno=data.root.IssuedPan;
                                                            var pp={};
                                                            if(panno)
                                                            {
                                                                pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,pan:panno};
                                                            }
                                                            else
                                                            {
                                                                pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor};
                                                            }

                                                            uiConfig = {menuLink:'WPanBusinessRegistration',pageTitle:'WPanBusiness Registration'};
                                                            DynamicUI(uiConfig,function(){
                                                            },pp);

                                                        }
                                                        else
                                                        {
                                                            uiConfig = {menuLink:'WPanBusinessRegistration',pageTitle:'WPanBusiness Registration'};
                                                            DynamicUI(uiConfig,function(){
                                                            },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                            }
                                                        }

                                                    },
                                                    failure: function ( result, request ) {

                                                        msg('ERROR','');
                                                    }

                                                });
										
										

                                    }
                                        else if(setRegFor==2)  //ITAX












                                        {
											console.log('herer');
                                            Ext.Ajax.request({
                                                url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
                                                params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                                                success: function ( result, request ) {
                                                    var data = Ext.decode(result.responseText); 
                                                    if(data.root)
                                                    {   
                                                        tpType=data.root.TaxpayerType;
                                                        businessTyp=data.root.TaxpayerCategoryID;
                                                        // code to check taxpayer type
														console.log('tpType123123',tpType);
                                                        if(businessTyp=="I")
                                                        {
                                                            var panno=data.root.IssuedPan;
                                                            var pp={};
                                                            if(panno)
                                                            {
                                                                pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,pan:panno};
                                                            }
                                                            else
                                                            {
                                                                pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor, busSubTyp:data.root.TaxpayerType,busTyp:data.root.TaxpayerCategoryID};
                                                            }

                                                            uiConfig = {menuLink:'PersonRegistration',pageTitle:'Person Registration'};            
                                                            DynamicUI(uiConfig,function(){ 
                                                            },pp);

                                                        }
                                                        else if(businessTyp=="B")

                                                        {
															console.log('tpType123123',tpType);
                                                            uiConfig = {menuLink:'BusinessRegistration',pageTitle:'Business Registration'};            
                                                            DynamicUI(uiConfig,function(){          
                                                            },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType, busSubTyp:tpType});  
                                                            } 	

                                                            else
                                                            {
                                                                uiConfig = {menuLink:'ShwSubmissionNo',pageTitle:'Your Submission No'};            
                                                                DynamicUI(uiConfig,function(){          
                                                                },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uiConfig = {menuLink:'ShwSubmissionNo',pageTitle:'Your Submission No'};            
                                                                DynamicUI(uiConfig,function(){          
                                                                },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                                }

                                                            },
                                                            failure: function ( result, request ) {

                                                                msg('ERROR','');
                                                            }

                                                        });
                                                    }
                                                    else if(setRegFor==3)  //VAT
                                                    {   
                                                        uiConfig = {menuLink:'VATRegistration',pageTitle:'VAT Registration'};        
                                                        DynamicUI(uiConfig,function(){  
                                                        },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                        }
                                                        else if(setRegFor==4)  //EXCISE
                                                        {        
                                                            uiConfig = {menuLink:'ExciseRegistration',pageTitle:'Excise Registration'};               
                                                            DynamicUI(uiConfig,function(){                     
                                                            },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});          
                                                            }
                                                            else if(setRegFor==5)  //ITAX,VAT,EXCISE
                                                            {
                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
                                                                    params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                                                                    success: function ( result, request ) {
                                                                        var data = Ext.decode(result.responseText); 
                                                                        if(data.root)
                                                                        {   
                                                                            tpType=data.root.TaxpayerType;
                                                                            businessTyp=data.root.TaxpayerCategoryID;
                                                                            // code to check taxpayer type
                                                                            if(businessTyp=="I")
                                                                            {
                                                                                uiConfig = {menuLink:'PersonRegistration',pageTitle:'Person Registration'};            
                                                                                DynamicUI(uiConfig,function(){ 
                                                                                },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor, busSubTyp:tpType});

                                                                                }        
                                                                                else
                                                                                {
                                                                                    uiConfig = {menuLink:'BusinessRegistration',pageTitle:'Business Registration'};            
                                                                                    DynamicUI(uiConfig,function(){          
                                                                                    },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType, busSubTyp:tpType});
                                                                                    }
                                                                                }

                                                                            },
                                                                            failure: function ( result, request ) {

                                                                                msg('ERROR','');
                                                                            }

                                                                        });

                                                                    }
                                                                    else if(setRegFor==6)  //ITAX,VAT






                                                                    {
                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
                                                                            params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                                                                            success: function ( result, request ) {
                                                                                var data = Ext.decode(result.responseText); 
                                                                                 if(data.root)
                                                                                {   
                                                                                    tpType=data.root.TaxpayerType;
                                                                                    businessTyp=data.root.TaxpayerCategoryID;
                                                                                    // code to check taxpayer type
                                                                                    if(businessTyp=="I")
                                                                                    {
                                                                                        var panno=data.root.IssuedPan;
                                                                                        var pp={};
                                                                                        if(panno)
                                                                                        {
																							//console.log('sudip2',panno);
                                                                                            pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,pan:panno, busSubTyp:tpType};
                                                                                        }
                                                                                        else
                                                                                        {
																							//console.log('sudip2',panno);
                                                                                            pp={subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor, busSubTyp:tpType};
                                                                                        }

                                                                                        uiConfig = {menuLink:'PersonRegistration',pageTitle:'Person Registration'};            
                                                                                        DynamicUI(uiConfig,function(){ 
                                                                                        },pp);

                                                                                        }        
                                                                                        else if(businessTyp=="B")
                                                                                        {
																							/////Joint Venture
																							console.log('heresudip',tpType);
																							if (tpType === '15')
																							{
																								uiConfig = {menuLink:'BusinessRegistration',pageTitle:'Joint Venture Registration'};            
																								DynamicUI(uiConfig,function(){          
																								},{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType, busSubTyp:tpType});
																							
																							}
																							else if (tpType === '16')
																							{
																								uiConfig = {menuLink:'TemporaryRegistration',pageTitle:'Temporary Registration'};            
																								DynamicUI(uiConfig,function(){          
																								},{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType, busSubTyp:tpType});
																							}
																							else
																							{
																								uiConfig = {menuLink:'BusinessRegistration',pageTitle:'Business Registration'};            
																								DynamicUI(uiConfig,function(){          
																								},{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType, busSubTyp:tpType});
																							}
                                                                                            
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                                uiConfig = {menuLink:'ShwSubmissionNo',pageTitle:'Your Submission No'};            
                                                                                                DynamicUI(uiConfig,function(){          
                                                                                                },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                                                        }

                                                                                }
                                                                                      else
                                                                                        {

																							uiConfig = {menuLink:'ShwSubmissionNo',pageTitle:'Your Submission No'};            
																							DynamicUI(uiConfig,function(){          
																							},{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});
                                                                                        }

                                                                                    },
                                                                                    failure: function ( result, request ) {

                                                                                        msg('ERROR','');
                                                                                    }

                                                                                });

                                                                            }
                                                                            else if(setRegFor==7)  //VAT,EXCISE
                                                                            {
                                                                                uiConfig = {menuLink:'VATRegistration',pageTitle:'VAT Registration'};            
                                                                                DynamicUI(uiConfig,function(){          
                                                                                },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});    
                                                                                }
                                                                                else if(setRegFor==8)  //IT,EXCISE
                                                                                {
                                                                                    Ext.Ajax.request({
                                                                                        url: '../Handlers/Registration/Taxpayer/TaxpayerInfoHandler.ashx?method=GetVatTaxpayer',
                                                                                        params:{submissionNo:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
                                                                                        success: function ( result, request ) {
                                                                                            var data = Ext.decode(result.responseText); 
                                                                                            if(data.root)
                                                                                            {   
                                                                                                tpType=data.root.TaxpayerType;
                                                                                                businessTyp=data.root.TaxpayerCategoryID;
                                                                                                // code to check taxpayer type
                                                                                                if(businessTyp=="I")
                                                                                                {
                                                                                                    uiConfig = {menuLink:'PersonRegistration',pageTitle:'Person Registration'};            
                                                                                                    DynamicUI(uiConfig,function(){ 
                                                                                                    },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor});

                                                                                                    }        
                                                                                                    else
                                                                                                    {
                                                                                                        uiConfig = {menuLink:'BusinessRegistration',pageTitle:'Business Registration'};            
                                                                                                        DynamicUI(uiConfig,function(){          
                                                                                                        },{subNo:submissionNo,busTyp:businessTyp,regFor:setRegFor,TaxpayerType:tpType});
                                                                                                        }
                                                                                                    }

                                                                                                },
                                                                                                failure: function ( result, request ) {

                                                                                                    msg('ERROR','');
                                                                                                }

                                                                                            });
                                                                                        }


                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("WARNING","Invalid Submission No");
                                                                                    }
                                                                                },
                                                                                failure: function ( result, request ) {
                                                                                    msg("FAILURE","Error in Fetching Data !!!");
                                                                                }
                                                                            });
                                                                            return;
                                                                        }

                                                                        // || userInfo.root.SubmittedYN == 'V'
                                                                        if(userInfo.root.SubmittedYN == 'N' || userInfo.root.SubmittedYN == 'Y')
                                                                        {


                                                                            if(userInfo.root.submittedFor=='ASS01')   // for Suresh 
                                                                            {
                                                                                me.LoadForD01(submissionNo);

                                                                            }

                                                                            if(userInfo.root.submittedFor=='CB-D01')   // for Suresh 
                                                                            {
                                                                                me.LoadForCBD01(submissionNo);

                                                                            }

                                                                            if(userInfo.root.submittedFor=='INST')
                                                                            {
                                                                                uiConfig = {menuLink:'EstimatedReturn',
                                                                                    pageTitle:'E-Estimate Return/Estimate Revision Return/Estimate Revision Notice'

                                                                                };

                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo});
                                                                            }
																			else if(userInfo.root.submittedFor=='INSTD09')
                                                                            {
                                                                                uiConfig = {menuLink:'EstimatedReturnD02',
                                                                                    pageTitle:'E-Estimate Return D02/Estimate Revision Return D02/Estimate Revision Notice D02'

                                                                                };

                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo});
                                                                            }
																			else if(userInfo.root.submittedFor=='SAD09')
                        {
                            var pan1 = userInfo.root.PAN;
                            uiConfig = {menuLink:'SelfAssessmentD02',
                                        pageTitle:'E-SelfAssessmentD02/SelfAssessmentD02'

                                       };

                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,fiscalYear:userInfo.root.FiscalYear,regOffcode:userInfo.root.RegOffice});
                        }
						else if(userInfo.root.submittedFor=='CBD09')
                        {
                            var pan1 = userInfo.root.PAN;
                            uiConfig = {menuLink:'SelfAssessmentD02CB',
                                        pageTitle:'E-SelfAssessmentD02CB/SelfAssessmentD02CB'

                                       };

                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,fiscalYear:userInfo.root.FiscalYear,regOffcode:userInfo.root.RegOffice});
                        }
						else if(userInfo.root.submittedFor=='SAD04')
                        {
							
                            var pan1 = userInfo.root.PAN;
                            uiConfig = {menuLink:'SelfAssessmentD04Annex',
                                        pageTitle:'SelfAssessmentD04'

                                       };

                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,loginType:"SubLogin"});
							
                        }
                                                                            else if(userInfo.root.submittedFor=='SA')
                                                                            {
                                                                                //NB:Income Tax
                                                                                //if(leaf !== "e-IncomeTax Self-Assessment" || leaf !== "D-03 Return")
                                                                                /*  if(leaf !== "D-03 Return")
                                                                                {
                                                                                msg("WARNING","This Submission is registered for 'e-IncomeTax Self-Assessment'.");
                                                                                return;
                                                                                }
                                                                                */
																				/*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };																				


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'SA'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='JA')
                                                                            {
                                                                                //NB:Income Tax
                                                                                /*   if(leaf !== "Jeopardy Assessment")
                                                                                {
                                                                                msg("WARNING","This Submission is registered for 'Jeopardy'.");
                                                                                return;
                                                                                }
                                                                                */
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'JA'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='CB')
                                                                            {
                                                                                //NB:Income Tax
                                                                                /* if(leaf !== "Change Off Business")
                                                                                {
                                                                                msg("WARNING","This Submission is registered for 'Change Off Business'.");
                                                                                return;
                                                                                }
                                                                                */
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'CB'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='BH')
                                                                            {
                                                                                //NB:Income Tax
                                                                                /*    if(leaf !== "Change of Control")
                                                                                {
                                                                                msg("WARNING","This Submission is registered for 'Change of Control'.");
                                                                                return;
                                                                                }
                                                                                */
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'BH'});


                                                                            }
                                                                        }

                                                                        else
                                                                        {
                                                                            console.log('submittedFor',userInfo.root.submittedFo);


                                                                            if(userInfo.root.submittedFor=='SA')
                                                                            {
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'SA'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='JA')
                                                                            {
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'JA'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='CB')
                                                                            {
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'CB'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='BH')
                                                                            {
                                                                                /*uiConfig = {menuLink:'SetAssessmentType',
                                                                                    pageTitle:'SetAssessmentType'
                                                                                };*/
																				uiConfig = {menuLink:'SelfAssessmentD03',
                                                                                    pageTitle:'SelfAssessmentD03'
                                                                                };


                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'BH'});


                                                                            }
                                                                            else if(userInfo.root.submittedFor=='INST')
                                                                            {

                                                                                //alert("verified case ");
                                                                                uiConfig = {menuLink:'EstimatedReturn',
                                                                                    pageTitle:'E-Estimate Return/Estimate Revision Return/Estimate Revision Notice'

                                                                                };

                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo});

                                                                            }
																			
																			
																	
																	
									  else if(userInfo.root.submittedFor=='SAD09')
                      								  {
                          								  var pan1 = userInfo.root.PAN;
                          								  uiConfig = {menuLink:'SelfAssessmentD02',
                                     							   pageTitle:'E-SelfAssessmentD02/SelfAssessmentD02'

                                    						   };

                            							//DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1});
														DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,fiscalYear:userInfo.root.FiscalYear});
                        							}
									else if(userInfo.root.submittedFor=='CBD09')
													{
														var pan1 = userInfo.root.PAN;
														uiConfig = {menuLink:'SelfAssessmentD02CB',
																	pageTitle:'E-SelfAssessmentD02CB/SelfAssessmentD02CB'

																   };
														alert(userInfo.root.submittedFor);
														DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,fiscalYear:userInfo.root.FiscalYear});
													}
													else if(userInfo.root.submittedFor=='SAD04')
														{
															var pan1 = userInfo.root.PAN;
															uiConfig = {menuLink:'SelfAssessmentD04Annex',
																		pageTitle:'SelfAssessmentD04'

																	   };

															DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:pan1,loginType:"SubLogin"});
														}
																			else if(userInfo.root.submittedFor=='INSTD09')
                                                                            {

                                                                                //alert("verified case ");
                                                                                uiConfig = {menuLink:'EstimatedReturnD02',
                                                                                    pageTitle:'E-Estimate Return D02/Estimate Revision Return D02/Estimate Revision Notice D02'

                                                                                };

                                                                                DynamicUI(uiConfig,null,{submissionNo:submissionNo});

                                                                            }
																			else if(userInfo.root.submittedFor=='ASS01')
                                                                    	   {
                                                                              me.LoadForD01(submissionNo);
                                                                           }
                                                                           else if(userInfo.root.submittedFor=='CB-D01')
                                                                           {
                                                                             me.LoadForCBD01(submissionNo);
                                                                           }
                                                                            else
                                                                            {      
                                                                                // alert("verify ");
                                                                                msg('INFO','Submission Number Already Verified1');
                                                                            }
                                                                        }
                                                                    },
                                                                    failure:function(fp, o) {

                                                                        msg('ERROR','There are Errors on the Pages');
                                                                    }
                                                                });

                                                            }               

    },

    onGeneralizedLoginAfterRender: function(component, eOpts) {
		
        var map = Ext.getCmp('CntSiteMapPath');
        var val = map.html;
        var arr = val.split(">>");
        var module = arr[arr.length-2].trim();
        var leaf = arr[arr.length-1].trim();


        Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].setValue(leaf);
        Ext.ComponentQuery.query('#hdnGenLoginModule')[0].setValue(module);
        var btnGetGenSubNo = Ext.ComponentQuery.query('#btnGetGenSubNo')[0];

        var lblmsb1= Ext.ComponentQuery.query('#lblmsb1')[0];
        var lblmsg2 =  Ext.ComponentQuery.query('#lblmsg2')[0];

        var modtitle = module + '>>' + leaf;

        if(("E-Self Assessment(Income Tax)" === module) && ("Income Tax Login" === leaf))
        { 
            //Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
            //cntSelfAssessmentInstruction.setVisible(false);
            //cntVatEstRet.setVisible(true);
            btnGetGenSubNo.setVisible(false);
            lblmsb1.setVisible(false);
            lblmsg2.setVisible(false);
        }

        if(("Value Added Tax System" === module) && ("Vat Returns Login" === leaf))
        { 
            //Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
            //cntSelfAssessmentInstruction.setVisible(false);
            //cntVatEstRet.setVisible(true);
            btnGetGenSubNo.setVisible(false);
            lblmsb1.setVisible(false);
            lblmsg2.setVisible(false);
        }
		else if(("Excise" === module) && ("Excise Returns Login" === leaf))
        {
            //Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
            //cntSelfAssessmentInstruction.setVisible(false);
            //cntVatEstRet.setVisible(true);
            btnGetGenSubNo.setVisible(false);
            lblmsb1.setVisible(false);
            lblmsg2.setVisible(false);
        }

        Ext.getCmp('CntSiteMapPath').update(modtitle);
        //Value Added Tax System>>Vat Returns Login
    },

    onBtnGetGenSubNoClick: function(button, e, eOpts) {
        var leaf=Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].getValue();
        var module=Ext.ComponentQuery.query('#hdnGenLoginModule')[0].getValue();

        var cntSelfAssessmentInstruction = Ext.ComponentQuery.query('#cntSelfAssessmentInstruction')[0];

        var cntVatEstRet = Ext.ComponentQuery.query('#cntVatEstRet')[0];
        var btnGetGenSubNo = Ext.ComponentQuery.query('#btnGetGenSubNo')[0];


        var uiConfig = {menuLink:'GetGeneralizedSubmissionNo',
                pageTitle:module + '>>' + leaf
            };
        var modtitle = module + '>>' + leaf;

        DynamicUI(uiConfig,function(){



            if((("Integrated Tax Menus" === module) && ("GeneralizedLogin" === leaf)))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);

                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);

            }

            else if(("Value Added Tax System" === module) && ("Vat Returns Login" === leaf))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
            }
			else if(("Excise" === module) && ("Excise Returns Login" === leaf))
            {
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
            }
            else if(("Value Added Tax System" === module) && ("Logins" === leaf))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
            }

            else if(("Income Tax System" === module) && ("Income Tax Login" === leaf))
            { 

                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
                btnGetGenSubNo.setVisible(false);
            }



        });
        Ext.getCmp('CntSiteMapPath').update(modtitle);
        //Income Tax System>>Income Tax Login



    },

    LoadReturns: function(submissionNo, submittedFor, pan, submittedYN,offCode) {
       console.log("log1");
		var uiConfig='';
		

        if(submittedFor=='VRET')
        {
            uiConfig = {menuLink:'VatReturns',
                pageTitle:'E-Vat Returns Entry'

            };

        }
		
        else if(submittedFor=='VCB')
        {
            uiConfig = {menuLink:'CloseOfBusiness',
                pageTitle:'E-Close of Business Entry'

            };


        }
console.log('uuu');


        DynamicUI(uiConfig,function(){
            var acctType='00';
            Ext.ComponentQuery.query("#txtAccountType")[0].setValue('00');
            Ext.ComponentQuery.query("#lblSubmissionNo")[0].setValue(submissionNo);
            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);
Ext.get('offCode').dom.innerHTML=offCode;
console.log('OffCode');


            if(submittedYN!='N')
            {


                msg('INFO','Submission Number Already Submitted.<BR>You Cannot Edit The Information.');
                Ext.ComponentQuery.query('#btnSaveVatReturns')[0].disable(true);
                Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].disable(true);
            }



            if(submittedYN=='Y')
            {

                Ext.ComponentQuery.query("#hfRTStatus")[0].setValue('Y');
            }


console.log('OffCode1');
            //LOAD TAXPAYER INFO    
            Ext.Ajax.request({
                url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                params: {
                    method:'GetTaxPayer',pan:pan,
                    acctType:acctType,
                    id: 1,formToken:Ext.get('frmToken').dom.innerHTML
                },
                success: function(response){
                    var obj =Ext.decode( response.responseText);
                    //console.log(obj);

                    var taxpayer=obj.root.Taxpayer;
                    var address=taxpayer.BusinessAddress.Address;
                    var office=taxpayer.Office;

                    if(taxpayer.AcctStatus!='A')
                    {
                        msg('INFO', 'PAN IS NOT ACTIVE');
                        return;
                    }
                    //Sets TaxPayer's Info
                    //console.log('taxpayer office', office);
                    Ext.get('offCode').dom.innerHTML=office.OfficeCode;
                    Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.BusinessName+' / '+taxpayer.Name);
                    Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                    Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);





console.log('OffCode2');
			            //LOAD VAT RETURNS DETAILS
            Ext.Ajax.request({
                url: '../Handlers/Vat/VatReturnsHandler.ashx',
                params: {method:'GetVatReturn',SubNo:submissionNo,
                    id: 1,formToken:Ext.get('frmToken').dom.innerHTML
                },
                success: function(response){
					//var strVTranDetail="";
                    var returnsInfo =Ext.decode( response.responseText);
					
				//var strVTranDetail = Ext.getStore('VATTranDetailStore');
                //strVTranDetail.removeAll();
				console.log('OffCode4');
                    if(returnsInfo.root!=='')
                    {



                        //Set Taxpayer Year Month Details
                        Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(returnsInfo.root.TaxYear);
                        Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(returnsInfo.root.FilePer);
                        Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(returnsInfo.root.Period);


                        //Set Taxpayer Transaction Details
                        Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(returnsInfo.root.TaxableSale);
                        Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(returnsInfo.root.VATOnSale);
                        Ext.ComponentQuery.query("#txtExport")[0].setValue(returnsInfo.root.Export);
                        Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(returnsInfo.root.ExemptSale);
                        Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(returnsInfo.root.TaxablePurchase);
                        Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(returnsInfo.root.VATOnPur);
                        Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(returnsInfo.root.TaxablePurI);
                        Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(returnsInfo.root.VATOnPurI);
                        Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(returnsInfo.root.ExemptPur);
                        Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(returnsInfo.root.ExemptPurI);
                        Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(returnsInfo.root.AdjCredit);
                        Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(returnsInfo.root.AdjDebit);
                        Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(returnsInfo.root.CreditBF);
                        Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(returnsInfo.root.RefClaimAmt);
                        Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(returnsInfo.root.RBID);
                        Ext.ComponentQuery.query("#txtTotalPayment")[0].setValue(returnsInfo.root.PaymentAmount);
                        Ext.ComponentQuery.query("#txtPaymentVoucherNo")[0].setValue(returnsInfo.root.VoucherNo);
                        Ext.ComponentQuery.query("#txtTotalPurchaseBillCount")[0].setValue(returnsInfo.root.TotalPurchasedBillCount);
                        Ext.ComponentQuery.query("#txtTotalCreditNote")[0].setValue(returnsInfo.root.TotalCreditNoteCount);
                        Ext.ComponentQuery.query("#txtTotalDebitNote")[0].setValue(returnsInfo.root.TotalDebitNoteCount);
                        Ext.ComponentQuery.query("#txtTotalCreditAdvice")[0].setValue(returnsInfo.root.TotalCreditAdviceCount);
                        Ext.ComponentQuery.query("#txtTotalDebitAdvice")[0].setValue(returnsInfo.root.TotalDebitAdviceCount);
                        Ext.ComponentQuery.query("#txtTotalSalesBillCount")[0].setValue(returnsInfo.root.TotalSalesBilCount);


			
			var strVTranDetail = Ext.getStore('VATTranDetailStore');
                strVTranDetail.removeAll();

//console.log('1',office.OfficeCode);
//if(office.OfficeCode.toString()==='52'||office.OfficeCode.toString()==='25'||office.OfficeCode.toString()==='27'||office.OfficeCode.toString()==='28')
//{
//	console.log('1',office.OfficeCode);
//	console.log(Ext.getStore('VATTranDetailStore'));
    Ext.ComponentQuery.query('#pnlTranDetails')[0].show();
strVTranDetail.add(returnsInfo.root.TaxpayerTranDetails);
//}
//else
//{
//    Ext.ComponentQuery.query('#pnlTranDetails')[0].hide();
//}






                


                        var form='';
                        if(submittedFor=='VRET')
                        {
                            Ext.getCmp("hfAction").setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmVatReturns')[0]).getForm();
                        }
                        else if(submittedFor=='VCB')
                        {
                            Ext.ComponentQuery.query("#txtStockAmount")[0].setValue(returnsInfo.root.TDStockAmount);
                            Ext.ComponentQuery.query("#txtStockTax")[0].setValue(returnsInfo.root.TDStockTax);

                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmCloseOfBusiness')[0]).getForm();
                        }




                        if(submittedYN!='N')
                        {
                            //Convert All Fields To Read Only
                            fields = form.getFields();
                            Ext.each(fields.items, function (f) {
                                f.inputEl.dom.disabled = true;
                            });
                            //Ends Converting Fields To Read Only
                        }

                    }       
                    else
                    {
                        if(submittedFor=='VRET')
                        {
                            Ext.getCmp("hfAction").setValue('A');
                        }
                        else if(submittedFor=='VCB')
                        {
                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue('A');
                        }

                    }
                }
            });
                }
            });

        });



    },

    LoadPermitRenewal: function (submissionNo, submittedFor, pan, submittedYN, offCode) {
        var username = Ext.ComponentQuery.query('#txtVRUsername')[0].getValue();
        var password = Ext.ComponentQuery.query('#txtVRPassword')[0].getValue();

        var uiConfig = { menuLink: 'ExciseBusinessList',
            pageTitle: 'Permit Renewal'

        };

        DynamicUI(uiConfig,null, {
            submissionno: submissionNo,
            pan: pan,
            username: username,
            password: password,
            officecode: offCode
        });

    },

    LoadNewPermit: function (submissionNo, submittedFor, pan, submittedYN, offCode) {
        var username = Ext.ComponentQuery.query('#txtVRUsername')[0].getValue();
        console.log("submissionNo1", submissionNo);
        var uiConfig = { menuLink: 'ExciseRegistration' };

        DynamicUI(uiConfig, null, {
            submissionNo: submissionNo,
            pan: pan,
            username: username,
            officecode: offCode
        });

    },

    LoadBrandRegistration: function (submissionNo, submittedFor, pan, submittedYN, offCode) {
       // var username = Ext.ComponentQuery.query('#txtVRUsername')[0].getValue();
		
        var uiConfig = { menuLink: 'AddBrand', pageTitle:'Excise Brand Registration' };

        DynamicUI(uiConfig,function(){
			Ext.ComponentQuery.query('#txtSubmissionNo')[0].setValue(submissionNo);
			Ext.ComponentQuery.query('#txtPan')[0].setValue(pan);
			var waitMsg = watiMsg('Loading....');
			Ext.Ajax.request({
				url: '../Handlers/Excise/Brand/BrandHandler.ashx?method=GetBranReg',
				params: {
					SubmissionNo:submissionNo,
					
				},
				success: function(response){
					waitMsg.hide();
					var resp=Ext.decode(response.responseText);
					
					if(resp.success==='true'){
						console.log(resp);
						
						
						var ExciseBrandRegistration=Ext.getStore('ExciseBrandRegistration');
						ExciseBrandRegistration.removeAll();
						ExciseBrandRegistration.add(resp.root);
						if(submittedYN=='Y'){
							Ext.ComponentQuery.query('#btnSaveBrandRegister')[0].disable();
							Ext.ComponentQuery.query('#btnSubmitBrandRegister')[0].disable();
							msg('Attention','Records Already Submitted!!');
						}
						
						
					}
					else{
						msg('ERROR', 'Error:'+resp.message);
					}
					
					
				},
				failure:function(result, response){
					waitMsg.hide();
					msg('ERROR OCURRED !!!', 'Error');
				}

			});
            
        });

    },

    LoadForCBD01: function(submissionNo) {
        var uiConfig={menuLink:'SelfAssessmentD01CB',
						pageTitle:'E-SelfAssessmentD01/SelfAssessmentD01CB'
					};

var pan = "";
		var fiscalYear = "";
		
		Ext.Ajax.request({

				url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessmentFiscalYearPan',
				params:{submissionNumber:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
				async:false,
				success:function(response){
						var obj=Ext.decode(response.responseText);
						var row= obj.root;
						//console.log('row',row);
						fiscalYear = row.FiscalYear;
						pan = row.Pan;
					},
					failure:function(response){
						
					}
                });
					
				var param = {submissionNo:submissionNo,pan:pan,fiscalYear:fiscalYear};	

				DynamicUI(uiConfig,function(){

					Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(submissionNo);
					Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
					Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
					Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
					Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
					//Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
					//Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);



					Ext.Ajax.request({

						url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessment',
						params:{submissionNumber:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
						success:function(response){
							var obj=Ext.decode(response.responseText);

							var row= obj.root;
							
							if(row.Pan !== undefined)
							{
								
								param.pan = row.Pan;
								
								Ext.ComponentQuery.query('#txtSADoneFromDate')[0].setValue(row.AssessmentToDate);

								var strSADone=Ext.getStore('SelfAssessmentD01');
								strSADone.removeAll();
								strSADone.loadData([],false);
					
								var taxpayer=obj.root.Taxpayer;
								var address=taxpayer.BusinessAddress.Address;
								var office=taxpayer.Office;
								var individual = null;

								param.offCode = office.OfficeCode;
					
								if(taxpayer.IndividualAddress !== undefined && taxpayer.IndividualAddress !== null)
								{
									individual = taxpayer.IndividualAddress.Address;
								}



					
					
					
								var strD01 = Ext.getStore("SelfAssessmentD01");            
								var strBank = Ext.getStore('strOfficeBankInfo');
					
								var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
								strRevenueAc.loadData([],false);
								strRevenueAc.load(
								{                            
									params:{acctType:"I",impOn:"SAD01"},
									scope:this,
									async:false,
									callback: function(records, operation, success){
					
										if(success){                       
					
					
											strBank.load(
											{
												params:{offcode:office.OfficeCode},
												scope:this,
												async:false,
												callback: function(records, operation, success){                
													if(success){
					


														strD01.add(obj.root.VoucherTbsLSTLST);
					
													}}}); 
					



					
												}}});
					
					
												Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);
					
					
					
												//----------------------------------------------------------------------------------------------------
												if(obj.root.RecordStatus==="D")
												{
													msg("Info","यो बिबरण हटाईसकेको छ <br/ ");
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
													Ext.ComponentQuery.query('#txtAcctType')[0].setValue(""); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");                   
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");
					
													Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
													Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
													Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
													Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);
					
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
													Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
													Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
													Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");                    
													Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
													Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");
					
													Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);  
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);   
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);                   
					
													Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);                  
					
													//--setting Values in three--
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");
					
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
													Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
													//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);
					
													var grdVoucherLSTa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
													grdVoucherLSTa.store.removeAll(); 
					
													var SelfAssessmentD01=Ext.getStore('SelfAssessmentD01');
													SelfAssessmentD01.removeAll();
					
													SelfAssessmentD01.loadData([],false);
					
					
					
					
					
													Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
													Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
													Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
													Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
												}
												else if(obj.root.RecordStatus==="V")
												{
													msg("Info","यो बिबरण रूजु भईसकेको छ <br/ ");
					
													Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);                  
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);

													Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
													Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
													Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
													Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);
				
													// ----------------------------------------
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);                    
													Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);                   
					
					
													//--setting Values in three--
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);
					
					
					
					
					
					
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
													Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
													Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
													Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);
					
					
					
													if(individual.LocationType=== "MM")
													{  
														Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
														// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="SM")
													{  
														Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="MN")
													{
					
														Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
													}
					
													else
													{   
														Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
					
													}
					
					
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);
					
													if(individual !== undefined && individual !== null)
													{
														Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
														Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
														Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
														Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
														Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);
					
														if(address.LocationType==="MM")
														{                           
															Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
					
														else if(address.LocationType==="SM")
														{
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
														else if(address.LocationType==="MN")
														{
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
														}
													}
													else
													{
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
													}
					
					
					
													//--setting Values in three--
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
													var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}											
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
													Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
													//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);
					
					
													Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
													Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true); 
													Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
													Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
													Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
					
					
												}
												else if(obj.root.RecordStatus==="F")
												{
													msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन् <br/ ");
													Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);                  
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);
					
					
					
					
													Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
													Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
													Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
													Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);
					
					
					
					
					
													// ----------------------------------------
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);                    
													Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);                   
					
					
													//--setting Values in three--
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);
					
					
					
					
					
					
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
													Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
													Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
													Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);
					
					
					
													if(individual.LocationType=== "MM")
													{  
														Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
														// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="SM")
													{  
														Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="MN")
													{
					
														Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
													}
					
													else
													{   
														Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
					
													}
					
					
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);


					
													if(individual !== undefined && individual !== null)
													{
														Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
														Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
														Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
														Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
														Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);
					
														if(address.LocationType==="MM")
														{                           
															Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
					
														else if(address.LocationType==="SM")
														{
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
														else if(address.LocationType==="MN")
														{
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
														}
													}
													else
													{
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
													}
					
					
					
													//--setting Values in three--
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
					var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}		
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
													Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
													//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);
					
					
													Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
													Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true); 
													Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
													Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
													Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
					
					
												}
					
												//----------------------------------------------------------------------------------------------------------
					
												else
												{     Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');   
					
					
													Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);
					
													Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
													Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 
					
													Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
													Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);
					
													Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
													Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
													Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
													Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
													Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
													Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);
					
													Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
													Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
													Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);
					
					
					
													if(individual.LocationType=== "MM")
													{  
														Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
														//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="SM")
													{  
														Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
														// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
													}
					
													else if(individual.LocationType==="MN")
													{
					
														Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
														//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
													}
					
													else
													{   
														Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
														Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
														//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
					
													}
					
					
													//---setting values in Two no field (Individual Address)-----
					
													Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);
					
					
					
													if(individual !== undefined && individual !== null)
													{
														Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
														Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
														Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
														Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
														Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);
					
														if(address.LocationType==="MM")
														{                           
															Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
					
														else if(address.LocationType==="SM")
														{
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
														}
														else if(address.LocationType==="MN")
														{
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
															Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
															Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
														}
													}
													else
													{
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
														Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
														Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
													}
					
					
					
													//--setting Values in three--
													if(obj.root.AssmtDetailChildDOne)
													{
					
														Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
														Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
														Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
														Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
													}
													else
													{
														Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
														Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
														Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
														Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
					
					
													}
													
													var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}		
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
													Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
													//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);
					
					
													//----------------------
													Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
					
													Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);
					
					
													Ext.ComponentQuery.query('#btnSaveSA')[0].enable(true);
													Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);





													Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
													Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
													Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
													Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);

					
												}
									}
									else
									{
										  Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(submissionNo);
									}

						   
						},
						failure:function(response){}
				 

					});
				},param);
    },

    LoadForD01: function(submissionNo) {
        var uiConfig={menuLink:'SelfAssessmentD01',
        pageTitle:'E-SelfAssessmentD01/SelfAssessmentD01'
			};

		var pan = "";
		var fiscalYear = "";
		
		Ext.Ajax.request({

				url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessmentFiscalYearPan',
				params:{submissionNumber:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
				async:false,
				success:function(response){
						var obj=Ext.decode(response.responseText);
						var row= obj.root;
						//console.log('row',row);
						fiscalYear = row.FiscalYear;
						pan = row.Pan;
					},
					failure:function(response){
						
					}
                });
					
				var param = {submissionNo:submissionNo,pan:pan,fiscalYear:fiscalYear};	

		DynamicUI(uiConfig,function(){

			Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(submissionNo);
			Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
			Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
			Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
			Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);


			Ext.Ajax.request({

				url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessment',
				params:{submissionNumber:submissionNo,formToken:Ext.get('frmToken').dom.innerHTML},
				success:function(response){
					var obj=Ext.decode(response.responseText);

					var row= obj.root;

					if(row.Pan !== undefined)
					{
						param.pan = row.Pan;

						var strSADone=Ext.getStore('SelfAssessmentD01');
						strSADone.removeAll();
						strSADone.loadData([],false);

						var taxpayer=obj.root.Taxpayer;
						var address=taxpayer.BusinessAddress.Address;
						var office=taxpayer.Office;
						var individual = null;
						
						param.offCode = office.OfficeCode;

						if(taxpayer.IndividualAddress !== undefined && taxpayer.IndividualAddress !== null)
						{
							individual = taxpayer.IndividualAddress.Address;
						}

						var strD01 = Ext.getStore("SelfAssessmentD01");            
						var strBank = Ext.getStore('strOfficeBankInfo');

						var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
						strRevenueAc.loadData([],false);
						strRevenueAc.load(
						{                            
							params:{acctType:"I",impOn:"SAD01"},
							scope:this,
							async:false,
							callback: function(records, operation, success){

								if(success){                       


									strBank.load(
									{
										params:{offcode:office.OfficeCode, bankcode:''},
										scope:this,
										async:false,
										callback: function(records, operation, success){                
											if(success){


												console.log("strRevenueAc", strRevenueAc);
												strD01.add(obj.root.VoucherTbsLSTLST);

											}}}); 


										}}});


										Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);



										//----------------------------------------------------------------------------------------------------
										if(obj.root.RecordStatus==="D")
										{
											msg("Info","यो बिबरण हटाईसकेको छ <br/ ");

											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
											Ext.ComponentQuery.query('#txtAcctType')[0].setValue(""); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");                   
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

											Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
											Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
											Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
											Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
											Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
											Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
											Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");                    
											Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
											Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

											Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);  
											Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);   
											Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);                   

											Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);                  

											//--setting Values in three--
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

											Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
											Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
											//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

											var grdVoucherLSTa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
											grdVoucherLSTa.store.removeAll(); 

											var SelfAssessmentD01=Ext.getStore('SelfAssessmentD01');
											SelfAssessmentD01.removeAll();

											SelfAssessmentD01.loadData([],false);





											Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
											Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
											Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
											Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
										}
										else if(obj.root.RecordStatus==="V")
										{
											msg("Info","यो बिबरण रूजु भईसकेको छ <br/ ");

											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);                  
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




											Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
											Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
											Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
											Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





											// ----------------------------------------
											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);                    
											Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);                   


											//--setting Values in three--
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);


											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
											Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
											Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
											Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



											if(individual.LocationType=== "MM")
											{  
												Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
												// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="SM")
											{  
												Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="MN")
											{

												Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
											}

											else
											{   
												Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

											}


											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);

											if(individual !== undefined && individual !== null)
											{
												Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
												Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
												Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
												Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
												Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);

												if(address.LocationType==="MM")
												{                           
													Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}

												else if(address.LocationType==="SM")
												{
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}
												else if(address.LocationType==="MN")
												{
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
												}
											}
											else
											{
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
											}



											//--setting Values in three--
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}	
											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

											Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
											Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
											//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


											Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
											Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true); 
											Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
											Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
											Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);

										}
										else if(obj.root.RecordStatus==="F")
										{
											msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन् <br/ ");
											Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");

											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);                  
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




											Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
											Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
											Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
											Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





											// ----------------------------------------
											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);                    
											Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);                   


											//--setting Values in three--
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);







											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
											Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
											Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
											Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



											if(individual.LocationType=== "MM")
											{  
												Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
												// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="SM")
											{  
												Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="MN")
											{

												Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
											}

											else
											{   
												Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

											}


											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);

											if(individual !== undefined && individual !== null)
											{
												Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
												Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
												Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
												Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
												Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);

												if(address.LocationType==="MM")
												{                           
													Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}

												else if(address.LocationType==="SM")
												{
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}
												else if(address.LocationType==="MN")
												{
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
												}
											}
											else
											{
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
											}



											//--setting Values in three--
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}	
											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

											Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
											Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
											//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


											Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
											Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true); 
											Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
											Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
											Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
										}
										else
										{     
											Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');   


											Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

											Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
											Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 

											Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(individual.Telephone);                   
											Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

											Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(individual.HouseNo);
											Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(individual.WardNo);
											Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(individual.StreetName);
											Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(individual.DistrictNameNep);
											Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(individual.Fax);
											Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(individual.Email);

											Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(individual.VdcTown);
											Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
											Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



											if(individual.LocationType=== "MM")
											{  
												Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
												//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="SM")
											{  
												Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
												// Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
											}

											else if(individual.LocationType==="MN")
											{

												Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
												//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
											}

											else
											{   
												Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
												Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
												//Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

											}


											//---setting values in Two no field (Individual Address)-----

											Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.BusinessName);



											if(individual !== undefined && individual !== null)
											{
												Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(address.HouseNo);
												Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(address.WardNo);
												Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(address.StreetName);                    
												Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(address.DistrictNameNep);
												Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(address.VdcTown);

												if(address.LocationType==="MM")
												{                           
													Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);      
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}

												else if(address.LocationType==="SM")
												{
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
												}
												else if(address.LocationType==="MN")
												{
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
													Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
													Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
												}
											}
											else
											{
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
												Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
												Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');
											}



											//--setting Values in three--
											if(obj.root.AssmtDetailChildDOne)
											{

												Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
												Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
												Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
												Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
											}
											else
											{
												Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
												Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
												Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
												Ext.ComponentQuery.query('#btnDelete')[0].disable(true);


											}
											var cnt = Ext.ComponentQuery.query('#txtRemissionDisTotalCnt')[0].getValue();											
													if(cnt >0)
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].TaxLiability;
														var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														var ConcessionAmount = obj.root.AssmtDetailChildDOne[0].ConcessionAmount;
														Ext.ComponentQuery.query('#txtRemissionTaxLiabilitySADone_1')[0].setValue(ConcessionAmount);
														taxLiabilityafterDed = taxLiability-ConcessionAmount;
														Ext.ComponentQuery.query('#txtNetTotTaxLiabilitySADone')[0].setValue(taxLiabilityafterDed);														
													}
													else
													{
														var taxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
														//var netTaxLiability = obj.root.AssmtDetailChildDOne[0].NetTaxLiability;
													}	
											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(taxLiability);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

											Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
											Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
											//Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


											//----------------------
											Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

											Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
											Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);

											//-------------------------


											Ext.ComponentQuery.query('#btnSaveSA')[0].enable(true);
											Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);
											Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
											Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
											Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
											Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);

										}
									}
									else
									{
										Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(submissionNo);
									}




								},
								failure:function(response){}


                    });
                },param);


    },

    LoadExciseReturns: function(submissionNo, submittedFor, pan, submittedYN) {
        var uiConfig='';

        if(submittedFor=='EXCRET')
        {
            uiConfig = {menuLink:'ExciseReturns',
                pageTitle:'Excise Returns Entry'

            };

        }
        else if(submittedFor=='ECB')
        {
            uiConfig = {menuLink:'ExciseReturns',
                pageTitle:'E-Close of Business Entry'

            };


        }



        DynamicUI(uiConfig,function(){
			console.log('Helo from Geberalized Login');
			if(submittedFor=='ECB')
			{
				
					Ext.ComponentQuery.query('#txtStockAmount')[0].show();
					Ext.ComponentQuery.query('#txtStockTax')[0].show();
					Ext.ComponentQuery.query('#lblExciseReturnCB')[0].show();
					Ext.ComponentQuery.query('#txtClosedDate')[0].show();
					//Ext.ComponentQuery.query('#')[0].show();
					Ext.ComponentQuery.query('#hdnRTType')[0].setValue('CB');
				
				Ext.ComponentQuery.query("#txtStockAmount")[0].setValue(returnsInfo.root.TDStockAmount);
				Ext.ComponentQuery.query("#txtStockTax")[0].setValue(returnsInfo.root.TDStockTax);
			}
			else
			{
				Ext.ComponentQuery.query('#txtStockAmount')[0].hide();
				Ext.ComponentQuery.query('#txtStockTax')[0].hide();
				Ext.ComponentQuery.query('#lblExciseReturnCB')[0].hide();
				Ext.ComponentQuery.query('#txtClosedDate')[0].hide();
				Ext.ComponentQuery.query('#hdnRTType')[0].setValue('RT');
				
			}
            var acctType='20';
            Ext.ComponentQuery.query("#txtAccountType")[0].setValue('20');
            Ext.ComponentQuery.query("#lblSubmissionNo")[0].setValue(submissionNo);
            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);


            if(submittedYN!='N')
            {


                msg('INFO','Submission Number Already Submitted.<BR>You Cannot Edit The Information.');
                Ext.ComponentQuery.query('#btnSaveVatReturns')[0].disable(true);
                Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].disable(true);
            }



            if(submittedYN=='Y')
            {

                Ext.ComponentQuery.query("#hfRTStatus")[0].setValue('Y');
            }



            //LOAD TAXPAYER INFO
            Ext.Ajax.request({
                url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                params: {
                    method:'GetTaxPayer',pan:pan,
                    acctType:acctType,
                    id: 1,formToken:Ext.get('frmToken').dom.innerHTML
                },
                success: function(response){
                    var obj =Ext.decode( response.responseText);
                    //console.log(obj);

                    var taxpayer=obj.root.Taxpayer;
                    var address=taxpayer.BusinessAddress.Address;
                    var office=taxpayer.Office;

                    if(taxpayer.AcctStatus!='A')
                    {
                        msg('INFO', 'PAN IS NOT ACTIVE');
                        return;
                    }
                    //Sets TaxPayer's Info
                    //console.log('taxpayer office', office);
                    Ext.get('offCode').dom.innerHTML=office.OfficeCode;
                    Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                    Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                    Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);

                }
            });
			Ext.Ajax.request({
				url: '../Handlers/Excise/Returns/ExciseReturnsHandler.ashx?method=GetCigratteBrandYN',
				params: {
					PAN:pan,
				},
				success: function(response){
					
					var resp=Ext.decode(response.responseText);
					if(resp.success==='true'){
						console.log('CigratteYN',resp.root);
						if(resp.root=='Y')
						{
							Ext.ComponentQuery.query('#lblCigratte')[0].show();
							Ext.ComponentQuery.query('#txtAdjRawExOnPurchase')[0].show();
							Ext.ComponentQuery.query('#txtAdjRawExVATOnPur')[0].show();	
							Ext.ComponentQuery.query('#txtAdjRawExVATOnSales')[0].hide();
							Ext.ComponentQuery.query('#txtVatOnPurI')[0].hide();
							Ext.ComponentQuery.query('#txtVatOnPurchase')[0].hide();
							Ext.ComponentQuery.query('#cigratteYN')[0].setValue('Y');
							Ext.ComponentQuery.query('#cntBrand')[0].hide();
							Ext.ComponentQuery.query('#cntBrandCigAlco')[0].show();
							
							
							
							
							
						}
						else
						{
							Ext.ComponentQuery.query('#lblCigratte')[0].hide();
							Ext.ComponentQuery.query('#txtAdjRawExOnPurchase')[0].hide();
							Ext.ComponentQuery.query('#txtAdjRawExVATOnPur')[0].hide();	
							Ext.ComponentQuery.query('#txtAdjRawExVATOnSales')[0].hide();
							Ext.ComponentQuery.query('#txtVatOnPurchase')[0].show();
							Ext.ComponentQuery.query('#txtVatOnPurI')[0].show();
							Ext.ComponentQuery.query('#cigratteYN')[0].setValue('N');
							Ext.ComponentQuery.query('#cntBrand')[0].show();
							Ext.ComponentQuery.query('#cntBrandCigAlco')[0].hide();
							Ext.ComponentQuery.query('#lblExciseReturnCB')[0].setText('३.२  कर कट्टी दाबी गरिसकेको स्टक');
							
							
						}
					}
					else{
						msg('ERROR', 'Error:'+resp.message);
					}
					
					
				},
				failure:function(result, response){
					
					msg('ERROR OCURRED !!!', 'Error');
				}

			});

			//Loading Excise Adjustment
		/*	var VatRetAdjustmentGridStore=Ext.getStore('VatRetAdjustmentGridStore');
			VatRetAdjustmentGridStore.removeAll();
			var waitMsg = watiMsg('Loading....');
				Ext.Ajax.request({
					url: '../Handlers/Excise/Returns/ExciseReturnsAdjustmentHandler.ashx?method=GetExciseAdjustment',
					//async:false,
					params: {
						AdjType:'',
						
					},
					success: function(response){
						waitMsg.hide();
						var resp=Ext.decode(response.responseText);
						
						if(resp.success==='true'){
							VatRetAdjustmentGridStore.add(resp.root);
						}
						else{
							msg('ERROR', 'Error:'+resp.message);
						}
						
						
					},
					failure:function(result, response){
						waitMsg.hide();
						msg('ERROR OCURRED !!!', 'Error');
					}

				});*/
			//
			


            //LOAD Excise RETURNS DETAILS
			
			
            Ext.Ajax.request({
                url: '../Handlers/Excise/Returns/ExciseReturnsHandler.ashx',
                params: {method:'GetExciseReturn',SubNo:submissionNo,
                    id: 1,formToken:Ext.get('frmToken').dom.innerHTML
                },
                success: function(response){
                    var returnsInfo =Ext.decode( response.responseText);
					console.log('returnsInfo',returnsInfo);

                    if(returnsInfo.root!=='')
                    {
						var VatRetAdjustmentGridStore=Ext.getStore('VatRetAdjustmentGridStore');
						console.log('VatRetAdjustmentGridStoreBefore',VatRetAdjustmentGridStore);
						if(returnsInfo.root.ExciseReturnsAdjustment)
						{
							var adjustments=returnsInfo.root.ExciseReturnsAdjustment;
							console.log('adjustments',adjustments);
							
							for(var i=0;i<VatRetAdjustmentGridStore.data.length;i++)
							{
									var recordGrid=VatRetAdjustmentGridStore.getAt(i);
									console.log('recordGrid',recordGrid);
									
									
									for(var j=0;j<adjustments.length;j++)
									{
											var record=adjustments[j];
											console.log('record',record);
											if(recordGrid.data.AdjustmentID==record.AdjustmentID)
											{
												recordGrid.data.AdjustmentAmt=record.AdjustmentAmt;
												break;
											}
									}
							}
						}
						console.log('VatRetAdjustmentGridStoreAfter',VatRetAdjustmentGridStore);
						var ExciseProductRegStore=Ext.getStore('ExciseProductRegStore');
						ExciseProductRegStore.removeAll();
						if(returnsInfo.root.ExciseProductRegistration)
						{
							console.log('RegData',returnsInfo.root.ExciseProductRegistration);
							ExciseProductRegStore.add(returnsInfo.root.ExciseProductRegistration);
						}
						
						
						



                        //Set Taxpayer Year Month Details
                        Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(returnsInfo.root.TaxYear);
                        Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(returnsInfo.root.FilePer);
                        Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(returnsInfo.root.Period);


                        //Set Taxpayer Transaction Details
                        Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(returnsInfo.root.TaxableSale);
                        Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(returnsInfo.root.VATOnSale);
                        Ext.ComponentQuery.query("#txtExport")[0].setValue(returnsInfo.root.Export);
                       // Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(returnsInfo.root.ExemptSale);
					   Ext.ComponentQuery.query("#txtTaxablePur")[0].setValue(returnsInfo.root.TaxablePurchase)
                        Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(returnsInfo.root.TaxablePurchaseRawMaterial);
                        Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(returnsInfo.root.VATOnPurRawMaterial);
                        Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(returnsInfo.root.TaxablePurIRawMaterial);
                        Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(returnsInfo.root.VATOnPurIRawMaterial);
                        Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(returnsInfo.root.ExemptPur);
                        Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(returnsInfo.root.ExemptPurI);
                        Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(returnsInfo.root.AdjCredit);
                        Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(returnsInfo.root.AdjDebit);
                        Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(returnsInfo.root.CreditBF);
                        Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(returnsInfo.root.RefClaimAmt);
                        Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(returnsInfo.root.RBID);
						Ext.ComponentQuery.query("#txtExciseOnPurchase")[0].setValue(returnsInfo.root.ExciseOnPurRawMaterial);
						Ext.ComponentQuery.query("#txtExciseOnPurI")[0].setValue(returnsInfo.root.ExciseOnPurIRawMaterial);
						//Ext.ComponentQuery.query("#txtExciseOnExemptPurchase")[0].setValue(returnsInfo.root.ExciseOnExempt_Pur);
						//Ext.ComponentQuery.query("#txtExciseOnExemptPurI")[0].setValue(returnsInfo.root.ExciseOnExemptPurI);
						Ext.ComponentQuery.query("#txtAdjExciseOnPurchase")[0].setValue(returnsInfo.root.AdjExciseOnPur);
						Ext.ComponentQuery.query("#txtAdjRawExOnPurchase")[0].setValue(returnsInfo.root.AdjRawExOnPur);
						Ext.ComponentQuery.query("#txtAdjRawExVATOnPur")[0].setValue(returnsInfo.root.AdjRawExVatOnPur);
						Ext.ComponentQuery.query("#txtAdjRawExVATOnSales")[0].setValue(returnsInfo.root.AdjRawExVatOnSales);
						Ext.ComponentQuery.query("#txtTaxablePurchaseOther")[0].setValue(returnsInfo.root.TaxablePurchaseOther)
						Ext.ComponentQuery.query("#txtExciseOnPurchaseOther")[0].setValue(returnsInfo.root.ExciseOnPurOther)
						Ext.ComponentQuery.query("#ddlPermitNo")[0].setValue(returnsInfo.root.PermitNo);
						Ext.ComponentQuery.query("#txtTaxablePurIOther")[0].setValue(returnsInfo.root.TaxablePurIOther);
						Ext.ComponentQuery.query("#txtExciseOnPurIOther")[0].setValue(returnsInfo.root.ExciseOnPurIOther);
						Ext.ComponentQuery.query("#txtOtherPurchases")[0].setValue(returnsInfo.root.TaxableOthers);
						Ext.ComponentQuery.query("#txtAdjTaxablePurchase")[0].setValue(returnsInfo.root.AdjTaxablePur);
						Ext.ComponentQuery.query("#txtTotalExcise")[0].setValue(returnsInfo.root.TotalExcise);
						Ext.ComponentQuery.query("#txtBillNo")[0].setValue(returnsInfo.root.BillNo);
						Ext.ComponentQuery.query("#txtIssuedBillNo")[0].setValue(returnsInfo.root.IssuedBillNo);
						Ext.ComponentQuery.query('#txtCreditNoteNo')[0].setValue(returnsInfo.root.CreditNoteNo);
						Ext.ComponentQuery.query('#txtDebitNoteNo')[0].setValue(returnsInfo.root.DebitNoteNo)
						
						//Ext.ComponentQuery.query('#txtStockAmount')[0].getValue()
						
						
						
                        var strMonProdRep = Ext.getStore('ExciseMonthlyProdRepStore');
                        strMonProdRep.removeAll();

                        var emRaw=Ext.getStore('ExciseMonthlyRawMPRepStore');
                        var emSemi=Ext.getStore('ExciseMonthlySMPRepStore');
                        var emReady=Ext.getStore('ExciseMonthlyRMPRepStore');

                        emRaw.removeAll();
                        emSemi.removeAll();
                        emReady.removeAll();

                        strMonProdRep.add(returnsInfo.root.MonthlyProdReps);
						
						
						

                        emRaw.add(returnsInfo.root.MonthlyProdReps);
                        emSemi.add(returnsInfo.root.MonthlyProdReps);




                        emRaw.filter('IsRaw','R');
                        emSemi.filter('IsRaw','S');



                        
						
						var prodRegistrationStore=Ext.getStore('ProductRegistrationStore');

						var pan=Ext.ComponentQuery.query('#txtPan')[0].getValue();
						
						
						var waitSave= waitMsg( 'Loading Product..');
						Ext.Ajax.request({
							url: '../Handlers/Excise/ProductRegistrationHandler.ashx',
							params:{method:'GetRegisteredProductsByPan',pan:pan,formToken:Ext.get('frmToken').dom.innerHTML},
							success: function(response){
								waitSave.hide();
								var JSONResponse=Ext.decode(response.responseText);
								prodRegistrationStore.removeAll();
								prodRegistrationStore.add(JSONResponse.root);
								
								emReady.add(returnsInfo.root.MonthlyProdReps);
								emReady.filter('IsRaw','F');
							},
							failure:function(fp, o) {
								waitSave.hide();
							}
						});







                        var form='';
                        if(submittedFor=='VRET')
                        {
                            Ext.ComponentQuery.query("#hfAction")[0].setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmVatReturns')[0]).getForm();
                        }
                        else if(submittedFor==='EXCRET')
                        {
                            Ext.ComponentQuery.query("#hfAction")[0].setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmExciseReturns')[0]).getForm();
                            if(emRaw.count()>0)
                            {
                              Ext.ComponentQuery.query('#hdnTransactionsValidRawMP')[0].setValue("false");
                            }
                            else
                            {
                                Ext.ComponentQuery.query('#hdnTransactionsValidRawMP')[0].setValue("true");
                            }
                            if(emSemi.count()>0)
                            {
                                Ext.ComponentQuery.query('#hdnTransactionsValidSMP')[0].setValue("false");
                            }
                            else
                            {
                                Ext.ComponentQuery.query('#hdnTransactionsValidSMP')[0].setValue("true");
                            }

                            if(emReady.count()>0)
                            {
                                Ext.ComponentQuery.query('#hdnTransactionsValidRMP')[0].setValue("false");
                            }
                            else
                            {
                                Ext.ComponentQuery.query('#hdnTransactionsValidRMP')[0].setValue("true");
                            }




                        }
                        else if(submittedFor=='VCB')
                        {
                            Ext.ComponentQuery.query("#txtStockAmount")[0].setValue(returnsInfo.root.TDStockAmount);
                            Ext.ComponentQuery.query("#txtStockTax")[0].setValue(returnsInfo.root.TDStockTax);

                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmCloseOfBusiness')[0]).getForm();
                        }




                        if(submittedYN!='N')
                        {
                            //Convert All Fields To Read Only
                            fields = form.getFields();
                            Ext.each(fields.items, function (f) {
                                f.inputEl.dom.disabled = true;
                            });
                            //Ends Converting Fields To Read Only
                        }

                    }
                    else
                    {
                        if(submittedFor=='VRET'||submittedFor==='EXCRET')
                        {
                            Ext.ComponentQuery.query("#hfAction")[0].setValue('A');
                        }
                        else if(submittedFor=='VCB'||submittedFor==='EXCCB')
                        {
                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue('A');
                        }

                    }
                }
            });
        });

    },
	LoadPanBill: function(submissionNo, submittedFor, pan, submittedYN,offCode) {
		 
		  var uiConfig;
		  var menuLink;
		  var pageTitle;
		  uiConfig = {menuLink:'ClientComputerBillingInfo',pageTitle:'ClientComputerBillingInfo'};
		  
		 var params={submissionNo:submissionNo };
		 
                                DynamicUI(uiConfig,function(){
                                },{params:params});
		 
		 
	 },

    init: function(application) {
        this.control({
            "#btnLoginGeneralized": {
                click: this.onBtnLoginGeneralizedClick
            },
            "#GeneralizedLogin": {
                afterrender: this.onGeneralizedLoginAfterRender
            },
            "#btnGetGenSubNo": {
                click: this.onBtnGetGenSubNoClick
            }
        });
    }

});
